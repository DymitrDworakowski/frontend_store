{"version":3,"file":"static/js/861.f2d18678.chunk.js","mappings":"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","sources":["../node_modules/ogl/src/core/Geometry.js","../node_modules/ogl/src/extras/Triangle.js","../node_modules/ogl/src/math/Vec3.js","../node_modules/ogl/src/math/functions/Vec3Func.js","../node_modules/ogl/src/core/Renderer.js","../node_modules/ogl/src/core/Program.js","../node_modules/ogl/src/math/functions/QuatFunc.js","../node_modules/ogl/src/math/functions/Vec4Func.js","../node_modules/ogl/src/math/Quat.js","../node_modules/ogl/src/math/functions/Mat4Func.js","../node_modules/ogl/src/math/Mat4.js","../node_modules/ogl/src/math/Euler.js","../node_modules/ogl/src/math/functions/EulerFunc.js","../node_modules/ogl/src/core/Transform.js","../node_modules/ogl/src/math/functions/Mat3Func.js","../node_modules/ogl/src/math/Mat3.js","../node_modules/ogl/src/core/Mesh.js"],"sourcesContent":["// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement\n                );\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Triangle extends Geometry {\n    constructor(gl, { attributes = {} } = {}) {\n        Object.assign(attributes, {\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\n        });\n\n        super(gl, attributes);\n    }\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    smoothLerp(v, decay, dt) {\n        Vec3Func.smoothLerp(this, this, v, decay, dt);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Performs a frame rate independant, linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} decay decay constant for interpolation. useful range between 1 and 25, from slow to fast.\n * @param {Number} dt delta time\n * @returns {vec3} out\n */\nexport function smoothLerp(out, a, b, decay, dt) {\n    const exp = Math.exp(-decay * dt);\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n\n    out[0] = b[0] + (ax - b[0]) * exp;\n    out[1] = b[1] + (ay - b[1]) * exp;\n    out[2] = b[2] + (az - b[2]) * exp;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = false;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LEQUAL;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    setStencilMask(value) {\n        if(this.state.stencilMask === value) return;\n        this.state.stencilMask = value;\n        this.gl.stencilMask(value)\n    }\n\n    setStencilFunc(func, ref, mask) {\n\n        if((this.state.stencilFunc === func) &&\n            (this.state.stencilRef === ref) &&\n            (this.state.stencilFuncMask === mask)\n        ) return;\n\n        this.state.stencilFunc = func || this.gl.ALWAYS;\n        this.state.stencilRef = ref || 0;\n        this.state.stencilFuncMask = mask || 0;\n\n        this.gl.stencilFunc(func || this.gl.ALWAYS, ref || 0, mask || 0);\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n\n        if(this.state.stencilFail === stencilFail &&\n            this.state.stencilDepthFail === depthFail &&\n            this.state.stencilDepthPass === depthPass\n        ) return;\n\n        this.state.stencilFail = stencilFail;\n        this.state.stencilDepthFail = depthFail;\n        this.state.stencilDepthPass = depthPass;\n        \n        this.gl.stencilOp(stencilFail, depthFail, depthPass);\n        \n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n\n            // Same for stencil\n            if(this.stencil || (!target || target.stencil)) {\n                this.enable(this.gl.STENCIL_TEST);\n                this.setStencilMask(0xff)\n            }\n\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LEQUAL,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n        this.stencilFunc = {};\n        this.stencilOp = {}\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // Create empty shaders and attach to program\n        this.vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        this.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, this.vertexShader);\n        gl.attachShader(this.program, this.fragmentShader);\n\n        // Compile shaders with source\n        this.setShaders({ vertex, fragment });\n    }\n\n    setShaders({ vertex, fragment }) {\n        if (vertex) {\n            // compile vertex shader and log errors\n            this.gl.shaderSource(this.vertexShader, vertex);\n            this.gl.compileShader(this.vertexShader);\n            if (this.gl.getShaderInfoLog(this.vertexShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n            }\n        }\n\n        if (fragment) {\n            // compile fragment shader and log errors\n            this.gl.shaderSource(this.fragmentShader, fragment);\n            this.gl.compileShader(this.fragmentShader);\n            if (this.gl.getShaderInfoLog(this.fragmentShader) !== '') {\n                console.warn(`${this.gl.getShaderInfoLog(this.fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n            }\n        }\n\n        // compile program and log errors\n        this.gl.linkProgram(this.program);\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\n            return console.warn(this.gl.getProgramInfoLog(this.program));\n        }\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = this.gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, this.gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = this.gl.getActiveAttrib(this.program, aIndex);\n            const location = this.gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    setStencilFunc(func, ref, mask) {\n        this.stencilRef = ref;\n        this.stencilFunc.func = func;\n        this.stencilFunc.ref = ref;\n        this.stencilFunc.mask = mask;\n    }\n\n    setStencilOp(stencilFail, depthFail, depthPass) {\n        this.stencilOp.stencilFail = stencilFail;\n        this.stencilOp.depthFail = depthFail;\n        this.stencilOp.depthPass = depthPass;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n\n        if(this.stencilFunc.func || this.stencilOp.stencilFail) this.gl.renderer.enable(this.gl.STENCIL_TEST)\n            else this.gl.renderer.disable(this.gl.STENCIL_TEST)\n\n        this.gl.renderer.setStencilFunc(this.stencilFunc.func, this.stencilFunc.ref, this.stencilFunc.mask)\n        this.gl.renderer.setStencilOp(this.stencilOp.stencilFail, this.stencilOp.depthFail, this.stencilOp.depthPass)\n\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let uniform = this.uniforms[activeUniform.uniformName];\n\n            for (const component of activeUniform.nameComponents) {\n                if (!uniform) break;\n\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 36306: // U_SAMPLER_2D\n        case 35680: // SAMPLER_CUBE\n        case 36289: // SAMPLER_2D_ARRAY\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2', '3'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this._target[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this._target);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this._target, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this._target, this._target, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this._target) {\n        QuatFunc.invert(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this._target) {\n        QuatFunc.conjugate(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this._target) {\n        QuatFunc.normalize(this._target, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this._target, qA, qB);\n        } else {\n            QuatFunc.multiply(this._target, this._target, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this._target, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this._target, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler, isInternal) {\n        QuatFunc.fromEuler(this._target, euler, euler.order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this._target, axis, a);\n        this.onChange();\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this._target, this._target, q, t);\n        this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        this._target[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","import * as vec3 from './Vec3Func.js';\n\nconst EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [1, 1, 1];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Decompose a mat4 to TRS properties.\n *\n * Equivalent to the Matrix4 decompose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} srcMat Matrix element, to be decomposed to TRS properties.\n * @param {quat4} dstRotation Rotation element, to be overwritten.\n * @param {vec3} dstTranslation Translation element, to be overwritten.\n * @param {vec3} dstScale Scale element, to be overwritten\n */\nexport function decompose(srcMat, dstRotation, dstTranslation, dstScale) {\n    let sx = vec3.length([srcMat[0], srcMat[1], srcMat[2]]);\n    const sy = vec3.length([srcMat[4], srcMat[5], srcMat[6]]);\n    const sz = vec3.length([srcMat[8], srcMat[9], srcMat[10]]);\n\n    // if determine is negative, we need to invert one scale\n    const det = determinant(srcMat);\n    if (det < 0) sx = -sx;\n\n    dstTranslation[0] = srcMat[12];\n    dstTranslation[1] = srcMat[13];\n    dstTranslation[2] = srcMat[14];\n\n    // scale the rotation part\n    const _m1 = srcMat.slice();\n\n    const invSX = 1 / sx;\n    const invSY = 1 / sy;\n    const invSZ = 1 / sz;\n\n    _m1[0] *= invSX;\n    _m1[1] *= invSX;\n    _m1[2] *= invSX;\n\n    _m1[4] *= invSY;\n    _m1[5] *= invSY;\n    _m1[6] *= invSY;\n\n    _m1[8] *= invSZ;\n    _m1[9] *= invSZ;\n    _m1[10] *= invSZ;\n\n    getRotation(dstRotation, _m1);\n\n    dstScale[0] = sx;\n    dstScale[1] = sy;\n    dstScale[2] = sz;\n}\n\n/**\n * From glTF-Transform\n * https://github.com/donmccurdy/glTF-Transform/blob/main/packages/core/src/utils/math-utils.ts\n *\n * Compose TRS properties to a mat4.\n *\n * Equivalent to the Matrix4 compose() method in three.js, and intentionally not using the\n * gl-matrix version. See: https://github.com/toji/gl-matrix/issues/408\n *\n * @param {mat4} dstMat Matrix element, to be modified and returned.\n * @param {quat4} srcRotation Rotation element of matrix.\n * @param {vec3} srcTranslation Translation element of matrix.\n * @param {vec3} srcScale Scale element of matrix.\n * @returns {mat4} dstMat, overwritten to mat4 equivalent of given TRS properties.\n */\nexport function compose(dstMat, srcRotation, srcTranslation, srcScale) {\n    const te = dstMat;\n\n    const x = srcRotation[0],\n        y = srcRotation[1],\n        z = srcRotation[2],\n        w = srcRotation[3];\n    const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    const sx = srcScale[0],\n        sy = srcScale[1],\n        sz = srcScale[2];\n\n    te[0] = (1 - (yy + zz)) * sx;\n    te[1] = (xy + wz) * sx;\n    te[2] = (xz - wy) * sx;\n    te[3] = 0;\n\n    te[4] = (xy - wz) * sy;\n    te[5] = (1 - (xx + zz)) * sy;\n    te[6] = (yz + wx) * sy;\n    te[7] = 0;\n\n    te[8] = (xz + wy) * sz;\n    te[9] = (yz - wx) * sz;\n    te[10] = (1 - (xx + yy)) * sz;\n    te[11] = 0;\n\n    te[12] = srcTranslation[0];\n    te[13] = srcTranslation[1];\n    te[14] = srcTranslation[2];\n    te[15] = 1;\n\n    return te;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    add(ma, mb) {\n        if (mb) Mat4Func.add(this, ma, mb);\n        else Mat4Func.add(this, this, ma);\n        return this;\n    }\n\n    sub(ma, mb) {\n        if (mb) Mat4Func.subtract(this, ma, mb);\n        else Mat4Func.subtract(this, this, ma);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (!ma.length) {\n            Mat4Func.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.compose(this, q, pos, scale);\n        return this;\n    }\n\n    decompose(q, pos, scale) {\n        Mat4Func.decompose(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = /* @__PURE__ */ new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n\n        // Keep reference to proxy target to avoid triggering onChange internally\n        this._target = this;\n\n        // Return a proxy to trigger onChange when array elements are edited directly\n        const triggerProps = ['0', '1', '2'];\n        return new Proxy(this, {\n            set(target, property) {\n                const success = Reflect.set(...arguments);\n                if (success && triggerProps.includes(property)) target.onChange();\n                return success;\n            },\n        });\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this._target[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this._target[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this._target[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this._target[0] = x;\n        this._target[1] = y;\n        this._target[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this._target[0] = v[0];\n        this._target[1] = v[1];\n        this._target[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this._target.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this._target, m, order);\n        this.onChange();\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order, isInternal) {\n        tmpMat4.fromQuaternion(q);\n        this._target.fromRotationMatrix(tmpMat4, order);\n        // Avoid infinite recursion\n        if (!isInternal) this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this._target[0] = a[o];\n        this._target[1] = a[o + 1];\n        this._target[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n        this.worldMatrixNeedsUpdate = false;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation._target.onChange = () => this.quaternion.fromEuler(this.rotation, true);\n        this.quaternion._target.onChange = () => this.rotation.fromQuaternion(this.quaternion, undefined, true);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.decompose(this.quaternion._target, this.position, this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion._target);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n"],"names":["tempVec3","Vec3","ID","ATTR_ID","isBoundsWarned","Geometry","constructor","gl","attributes","arguments","length","undefined","canvas","console","error","this","id","VAOs","drawRange","start","count","instancedCount","renderer","bindVertexArray","currentGeometry","glState","state","key","addAttribute","attr","size","type","data","Float32Array","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","target","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","offset","byteLength","divisor","instanced","needsUpdate","usage","STATIC_DRAW","buffer","updateAttribute","isInstanced","warn","Math","min","index","max","isNewBuffer","createBuffer","boundBuffer","bindBuffer","bufferData","bufferSubData","setIndex","value","setDrawRange","setInstancedCount","createVAO","program","attributeOrder","createVertexArray","bindAttributes","attributeLocations","forEach","location","_ref","name","concat","numLoc","i","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","draw","_ref2","_this$attributes$inde","mode","TRIANGLES","_ref3","indexBytesPerElement","drawElementsInstanced","drawArraysInstanced","drawElements","drawArrays","getPosition","position","computeBoundingBox","array","bounds","center","scale","radius","Infinity","set","l","x","y","z","sub","add","divide","computeBoundingSphere","maxRadiusSq","fromArray","squaredDistance","sqrt","remove","deleteVertexArray","deleteBuffer","Triangle","Object","assign","uv","super","Array","v","copy","Vec3Func","va","vb","multiply","inverse","len","distance","squaredLen","negate","cross","normalize","dot","equals","applyMatrix3","mat3","applyMatrix4","mat4","scaleRotateMatrix4","applyQuaternion","q","angle","lerp","t","smoothLerp","decay","dt","clone","a","o","toArray","transformDirection","out","b","subtract","squaredLength","ax","ay","az","bx","by","bz","exp","transformMat4","m","w","scaleRotateMat4","transformMat3","transformQuat","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","PI","acos","exactEquals","Renderer","document","createElement","width","height","dpr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","autoClear","webgl","color","getContext","isWebgl2","setSize","blendFunc","src","ONE","dst","ZERO","blendEquation","modeRGB","FUNC_ADD","cullFace","frontFace","CCW","depthMask","depthFunc","LEQUAL","premultiplyAlpha","flipY","unpackAlignment","framebuffer","viewport","textureUnits","activeTextureUnit","uniformLocations","Map","currentProgram","extensions","getExtension","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","style","setViewport","setScissor","scissor","enable","disable","setBlendFunc","srcAlpha","dstAlpha","blendFuncSeparate","setBlendEquation","modeAlpha","blendEquationSeparate","setCullFace","setFrontFace","setDepthMask","setDepthFunc","setStencilMask","stencilMask","setStencilFunc","func","ref","mask","stencilFunc","stencilRef","stencilFuncMask","ALWAYS","setStencilOp","stencilFail","depthFail","depthPass","stencilDepthFail","stencilDepthPass","stencilOp","activeTexture","TEXTURE0","bindFramebuffer","FRAMEBUFFER","extension","webgl2Func","extFunc","bind","sortOpaque","renderOrder","zDepth","sortTransparent","sortUI","getRenderList","scene","camera","frustumCull","sort","renderList","updateFrustum","traverse","node","visible","frustumCulled","frustumIntersectsMesh","push","opaque","transparent","ui","depthTest","worldMatrix","getTranslation","projectionViewMatrix","render","update","clear","DEPTH_TEST","STENCIL_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","updateMatrixWorld","arrayCacheF32","Program","vertex","fragment","uniforms","BACK","depthWrite","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","setShaders","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","getUniformLocation","split","match","uniformName","nameComponents","slice","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","getAttribLocation","join","applyState","CULL_FACE","BLEND","use","flipFaces","textureUnit","useProgram","activeUniform","component","isArray","texture","setUniform","CW","deleteProgram","arrayLen","valueLen","flatten","setValue","get","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","warnCount","message","aw","bw","Quat","onChange","_target","triggerProps","Proxy","property","success","Reflect","includes","identity","QuatFunc","rotateX","rad","sin","cos","rotateY","rotateZ","a0","a1","a2","a3","invDot","conjugate","qA","qB","fromMatrix3","matrix3","fRoot","fTrace","j","k","fromEuler","euler","isInternal","order","sx","cx","sy","cy","sz","cz","fromAxisAngle","axis","s","slerp","omega","cosom","sinom","scale0","scale1","determinant","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","getScaling","mat","m11","m12","m13","m21","m22","m23","m31","m32","m33","hypot","getRotation","temp","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","Mat4","m00","m01","m02","m03","m10","m20","m30","Mat4Func","translate","rotate","c","b00","b01","b02","b10","b11","b12","b20","b21","b22","abs","ma","mb","fromPerspective","fov","aspect","near","far","fovy","f","tan","nf","fromOrthogonal","left","right","bottom","top","lr","bt","fromQuaternion","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","setPosition","b03","b04","b05","b06","b07","b08","b09","det","compose","pos","dstMat","srcRotation","srcTranslation","srcScale","te","xy","xz","yz","decompose","srcMat","dstRotation","dstTranslation","dstScale","vec3","_m1","invSX","invSY","invSZ","getMaxScaleOnAxis","lookAt","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","tmpMat4","Euler","reorder","fromRotationMatrix","asin","atan2","EulerFunc","Transform","parent","children","matrix","matrixAutoUpdate","worldMatrixNeedsUpdate","quaternion","rotation","setParent","notifyParent","removeChild","addChild","child","notifyChild","indexOf","splice","force","updateMatrix","callback","Mat3","Mat3Func","fromMatrix4","fromBasis","vec3a","vec3b","vec3c","getNormalMatrix","Mesh","geometry","modelViewMatrix","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","onBeforeRender","onAfterRender","modelMatrix","viewMatrix","projectionMatrix","cameraPosition","worldPosition","mesh"],"sourceRoot":""}